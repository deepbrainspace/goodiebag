version: 2.1

orbs:
  node: circleci/node@5.2.0
  nx: nrwl/nx@1.7.0

parameters:
  main-branch:
    type: string
    default: main

workflows:
  # CI workflow - runs on PRs and feature branches
  ci:
    jobs:
      - dependencies:
          filters:
            branches:
              ignore:
                - main
                - develop
      - lint:
          requires:
            - dependencies
          filters:
            branches:
              ignore:
                - main
                - develop
      - test:
          requires:
            - dependencies
          filters:
            branches:
              ignore:
                - main
                - develop
      - build:
          requires:
            - lint
            - test
          filters:
            branches:
              ignore:
                - main
                - develop

  # CD workflow - runs on main/develop merges
  cd:
    jobs:
      - dependencies:
          filters:
            branches:
              only:
                - main
                - develop
      - publish-and-release:
          name: publish-main-sha
          use-sha-version: true
          requires:
            - dependencies
          filters:
            branches:
              only:
                - main
      - publish-and-release:
          name: publish-dev-sha
          use-sha-version: true
          npm-tag-suffix: "-dev"
          requires:
            - dependencies
          filters:
            branches:
              only:
                - develop

  # Tag release workflow - runs on version tags
  tag-release:
    jobs:
      - dependencies:
          filters:
            tags:
              only: /^.*-v.*/
            branches:
              ignore: /.*/
      - publish-and-release:
          name: publish-tag-version
          use-sha-version: false
          requires:
            - dependencies
          filters:
            tags:
              only: /^.*-v.*/
            branches:
              ignore: /.*/ 

jobs:
  dependencies:
    docker:
      - image: cimg/node:20.11
    steps:
      - checkout
      - run:
          name: Install pnpm
          command: |
            sudo corepack enable
            corepack prepare pnpm@9.0.0 --activate
      - restore_cache:
          keys:
            - pnpm-deps-v2-{{ checksum "pnpm-lock.yaml" }}
            - pnpm-deps-v2-
      - run:
          name: Install dependencies
          command: pnpm install --frozen-lockfile
      - save_cache:
          key: pnpm-deps-v2-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.pnpm-store
            - node_modules
      - nx/set-shas:
          main-branch-name: << pipeline.parameters.main-branch >>
      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - nx/set-shas:
          main-branch-name: << pipeline.parameters.main-branch >>
      - run:
          name: Run affected linting
          command: npx nx affected --target=lint --parallel=3 --ci

  test:
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - nx/set-shas:
          main-branch-name: << pipeline.parameters.main-branch >>
      - run:
          name: Run affected tests
          command: npx nx affected --target=test --parallel=3 --ci --code-coverage
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage

  build:
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - nx/set-shas:
          main-branch-name: << pipeline.parameters.main-branch >>
      - run:
          name: Build affected packages
          command: npx nx affected --target=build --parallel=3 --ci
      - persist_to_workspace:
          root: .
          paths:
            - packages/*/dist

  # Unified publish and release job with parameters
  publish-and-release:
    parameters:
      use-sha-version:
        type: boolean
        default: false
      npm-tag-suffix:
        type: string
        default: ""
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - nx/set-shas:
          main-branch-name: << pipeline.parameters.main-branch >>
      - run:
          name: Install GitHub CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
      - run:
          name: Authenticate with registries
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
            pnpm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"
            echo "$GITHUB_TOKEN" | gh auth login --with-token
      - run:
          name: Determine version strategy
          command: |
            if [ "<< parameters.use-sha-version >>" = "true" ]; then
              echo "Using SHA-based versioning"
              echo "export VERSION_STRATEGY=sha" >> $BASH_ENV
              echo "export VERSION_VALUE=$(git rev-parse --short HEAD)" >> $BASH_ENV
            else
              echo "Using tag-based versioning"
              echo "export VERSION_STRATEGY=tag" >> $BASH_ENV
              echo "export PACKAGE_NAME=$(echo "$CIRCLE_TAG" | sed 's/-v[0-9].*//')" >> $BASH_ENV
              echo "export VERSION_VALUE=$(echo "$CIRCLE_TAG" | sed 's/.*-v//')" >> $BASH_ENV
            fi
            echo "export NPM_TAG_SUFFIX=<< parameters.npm-tag-suffix >>" >> $BASH_ENV
      - run:
          name: Build and publish packages
          command: |
            if [ "$VERSION_STRATEGY" = "sha" ]; then
              # SHA-based: publish affected packages
              AFFECTED_PACKAGES=$(npx nx show projects --affected --with-target=build --json | jq -r '.[]')
              
              if [ -z "$AFFECTED_PACKAGES" ]; then
                echo "No packages affected - nothing to publish"
                exit 0
              fi
              
              echo "Affected packages: $AFFECTED_PACKAGES"
              npx nx affected --target=build --parallel=3 --ci
              
              for package in $AFFECTED_PACKAGES; do
                echo "Publishing package: $package with SHA version: $VERSION_VALUE"
                PACKAGE_PATH=$(npx nx show project $package --json | jq -r '.root')
                cd "$PACKAGE_PATH"
                
                # Set SHA as version using pnpm
                pnpm version "$VERSION_VALUE" --no-git-tag-version
                
                # Publish with SHA as npm tag using pnpm
                pnpm publish --tag "${VERSION_VALUE}${NPM_TAG_SUFFIX}" --no-git-checks
                
                # Create GitHub release
                pnpm pack
                TARBALL=$(ls *.tgz)
                RELEASE_TAG="${package}-${VERSION_VALUE}${NPM_TAG_SUFFIX}"
                
                gh release create "$RELEASE_TAG" "$TARBALL" \
                  --title "Release ${package} ${VERSION_VALUE}${NPM_TAG_SUFFIX}" \
                  --notes "Release of @deepbrainspace/${package} from commit ${VERSION_VALUE}" \
                  --prerelease
                
                cd - > /dev/null
              done
            else
              # Tag-based: publish specific package
              echo "Publishing $PACKAGE_NAME with tag version: $VERSION_VALUE"
              
              if ! npx nx show project "$PACKAGE_NAME" --json >/dev/null 2>&1; then
                echo "Error: Package $PACKAGE_NAME not found"
                exit 1
              fi
              
              # Fresh build for tag releases
              npx nx build "$PACKAGE_NAME" --skip-nx-cache
              
              PACKAGE_PATH=$(npx nx show project "$PACKAGE_NAME" --json | jq -r '.root')
              cd "$PACKAGE_PATH"
              
              # Set semantic version using pnpm
              pnpm version "$VERSION_VALUE" --no-git-tag-version
              
              # Publish with version as npm tag using pnpm
              pnpm publish --tag "$VERSION_VALUE" --no-git-checks
              
              # Create GitHub release
              pnpm pack
              TARBALL=$(ls *.tgz)
              
              gh release create "$CIRCLE_TAG" "$TARBALL" \
                --title "Release ${PACKAGE_NAME} v${VERSION_VALUE}" \
                --notes "Production release of @deepbrainspace/${PACKAGE_NAME} v${VERSION_VALUE}" \
                --verify-tag
            fi