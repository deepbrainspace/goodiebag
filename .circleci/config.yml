version: 2.1

orbs:
  node: circleci/node@5.2.0
  nx: nrwl/nx@1.6.2

parameters:
  main-branch:
    type: string
    default: main

workflows:
  ci:
    jobs:
      - dependencies
      - lint:
          requires:
            - dependencies
      - test:
          requires:
            - dependencies
      - build:
          requires:
            - lint
            - test
      - npm-publish:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/
      - github-release:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              only: /^v.*/

jobs:
  dependencies:
    docker:
      - image: cimg/node:20.11
    steps:
      - checkout
      - run:
          name: Install pnpm
          command: |
            sudo corepack enable
            corepack prepare pnpm@9.0.0 --activate
      - restore_cache:
          keys:
            - pnpm-deps-v2-{{ checksum "pnpm-lock.yaml" }}
            - pnpm-deps-v2-
      - run:
          name: Install dependencies
          command: pnpm install --frozen-lockfile
      - save_cache:
          key: pnpm-deps-v2-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.pnpm-store
            - node_modules
      - nx/set-shas:
          main-branch-name: << pipeline.parameters.main-branch >>
      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - nx/set-shas:
          main-branch-name: << pipeline.parameters.main-branch >>
      - run:
          name: Run affected linting
          command: npx nx affected --target=lint --parallel=3 --ci

  test:
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - nx/set-shas:
          main-branch-name: << pipeline.parameters.main-branch >>
      - run:
          name: Run affected tests
          command: npx nx affected --target=test --parallel=3 --ci --code-coverage
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage

  build:
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - nx/set-shas:
          main-branch-name: << pipeline.parameters.main-branch >>
      - run:
          name: Build affected packages
          command: npx nx affected --target=build --parallel=3 --ci
      - persist_to_workspace:
          root: .
          paths:
            - packages/*/dist

  npm-publish:
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Authenticate with npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run:
          name: Publish affected packages to npm
          command: |
            # Get list of affected publishable packages
            AFFECTED_PACKAGES=$(npx nx show projects --affected --with-target=publish --json | jq -r '.[]')
            
            for package in $AFFECTED_PACKAGES; do
              echo "Publishing package: $package"
              PACKAGE_PATH=$(npx nx show project $package --json | jq -r '.root')
              cd "$PACKAGE_PATH"
              
              if [ "$CIRCLE_TAG" ]; then
                # Tag-based release (production)
                npm publish
              elif [ "$CIRCLE_BRANCH" = "main" ]; then
                # Main branch release (beta)
                npm version patch --no-git-tag-version
                npm publish --tag beta
              fi
              
              cd - > /dev/null
            done
      - persist_to_workspace:
          root: .
          paths:
            - packages/nx-surrealdb/package.json

  github-release:
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install GitHub CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
      - run:
          name: Authenticate with GitHub
          command: echo "$GITHUB_TOKEN" | gh auth login --with-token
      - run:
          name: Create GitHub releases for affected packages
          command: |
            # Get list of affected publishable packages
            AFFECTED_PACKAGES=$(npx nx show projects --affected --with-target=publish --json | jq -r '.[]')
            
            for package in $AFFECTED_PACKAGES; do
              echo "Creating GitHub release for: $package"
              PACKAGE_PATH=$(npx nx show project $package --json | jq -r '.root')
              PACKAGE_NAME=$(npx nx show project $package --json | jq -r '.name')
              cd "$PACKAGE_PATH"
              
              if [ "$CIRCLE_TAG" ]; then
                # Tag-based release (production)
                npm pack
                TARBALL=$(ls *.tgz)
                gh release create "${PACKAGE_NAME}-${CIRCLE_TAG}" "$TARBALL" \
                  --title "Release ${PACKAGE_NAME} ${CIRCLE_TAG}" \
                  --notes "Production release of @deepbrainspace/${PACKAGE_NAME} ${CIRCLE_TAG}"
              elif [ "$CIRCLE_BRANCH" = "main" ]; then
                # Main branch release (beta)
                NEW_VERSION=$(node -p "require('./package.json').version")
                npm pack
                TARBALL=$(ls *.tgz)
                gh release create "${PACKAGE_NAME}-v${NEW_VERSION}-beta" "$TARBALL" \
                  --title "Beta Release ${PACKAGE_NAME} v${NEW_VERSION}" \
                  --notes "Beta release of @deepbrainspace/${PACKAGE_NAME} v${NEW_VERSION}" \
                  --prerelease
              fi
              
              cd - > /dev/null
            done