version: 2.1

orbs:
  node: circleci/node@5.2.0

workflows:
  # Production release workflow - runs on version tags
  cd-tags:
    jobs:
      - dependencies:
          filters:
            tags:
              only: /^.*-v.*/
            branches:
              ignore: /.*/
      - publish-semantic-version:
          requires:
            - dependencies
          filters:
            tags:
              only: /^.*-v.*/
            branches:
              ignore: /.*/

jobs:
  dependencies:
    docker:
      - image: cimg/node:20.11
    steps:
      - checkout
      - run:
          name: Install pnpm
          command: |
            sudo corepack enable
            corepack prepare pnpm@9.0.0 --activate
      - restore_cache:
          keys:
            - pnpm-deps-v2-{{ checksum "pnpm-lock.yaml" }}
            - pnpm-deps-v2-
      - run:
          name: Install dependencies
          command: pnpm install --frozen-lockfile
      - save_cache:
          key: pnpm-deps-v2-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.pnpm-store
            - node_modules
      - persist_to_workspace:
          root: .
          paths:
            - .

  # Semantic version publishing for tagged releases
  publish-semantic-version:
    docker:
      - image: cimg/node:20.11
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install GitHub CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
      - run:
          name: Authenticate with registries
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
            pnpm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"
            echo "$GITHUB_TOKEN" | gh auth login --with-token
      - run:
          name: Publish semantic version release
          command: |
            # Extract package name and version from tag
            PACKAGE_NAME=$(echo "$CIRCLE_TAG" | sed 's/-v[0-9].*//')
            PACKAGE_VERSION=$(echo "$CIRCLE_TAG" | sed 's/.*-v//')

            echo "Publishing $PACKAGE_NAME with semantic version: $PACKAGE_VERSION"

            # Verify package exists
            if ! npx nx show project "$PACKAGE_NAME" --json >/dev/null 2>&1; then
              echo "Error: Package $PACKAGE_NAME not found"
              exit 1
            fi

            # Fresh build for production releases (no cache)
            npx nx build "$PACKAGE_NAME" --skip-nx-cache

            # Navigate to package directory
            PACKAGE_PATH=$(npx nx show project "$PACKAGE_NAME" --json | jq -r '.root')
            cd "$PACKAGE_PATH"

            # Set semantic version
            pnpm version "$PACKAGE_VERSION" --no-git-tag-version

            # Publish with semantic version as npm tag (production release)
            pnpm publish --tag "$PACKAGE_VERSION" --no-git-checks

            # Also publish as 'latest' for convenience
            pnpm publish --tag latest --no-git-checks

            # Create GitHub release
            pnpm pack
            TARBALL=$(ls *.tgz)

            gh release create "$CIRCLE_TAG" "$TARBALL" \
              --title "Release ${PACKAGE_NAME} v${PACKAGE_VERSION}" \
              --notes "Production release of @deepbrainspace/${PACKAGE_NAME} v${PACKAGE_VERSION}" \
              --verify-tag
