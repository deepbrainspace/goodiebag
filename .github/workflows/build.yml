name: ⚙️ Build

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  # Check if this is a release branch
  check-release:
    name: 🔍 Check Release Branch
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.check.outputs.is-release }}
    steps:
      - name: Check if release branch
        id: check
        run: |
          if [[ "${{ github.head_ref }}" =~ ^release/ ]]; then
            echo "is-release=true" >> $GITHUB_OUTPUT
            echo "🚀 Release branch detected: ${{ github.head_ref }}"
          else
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "🔍 Regular branch detected: ${{ github.head_ref }}"
          fi

  # Release branch validation (lightweight)
  validate-release:
    name: ✅ Validate Release
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.is-release == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate release artifacts
        run: |
          echo "🔍 Validating release branch: ${{ github.head_ref }}"

          # Check for git tags
          TAGS=$(git tag --points-at HEAD)
          if [ -n "$TAGS" ]; then
            echo "✅ Found git tags: $TAGS"
          else
            echo "❌ No git tags found on HEAD commit"
            exit 1
          fi

          # Check for recent changelog updates
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          if echo "$CHANGED_FILES" | grep -q "CHANGELOG.md"; then
            echo "✅ Changelog updated in this commit"
          else
            echo "❌ No changelog updates found"
            exit 1
          fi

          # Check for version bump in package.json files
          if echo "$CHANGED_FILES" | grep -q "package.json"; then
            echo "✅ Package version files updated"
          else
            echo "❌ No package.json updates found"
            exit 1
          fi

          echo "✅ Release validation passed"

  # Phase 1: Detection (only for non-release branches)
  detect-affected:
    name: 🔍 Detect Affected Packages
    needs: check-release
    if: needs.check-release.outputs.is-release == 'false'
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.detect.outputs.packages }}
      has-packages: ${{ steps.detect.outputs.has-packages }}
      package-count: ${{ steps.detect.outputs.package-count }}
      package-groups: ${{ steps.detect.outputs.package-groups }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace

      - name: Detect affected packages
        id: detect
        uses: ./.github/actions/detect-affected

  # Phase 2: Validation (Parallel per Package) - only for non-release branches
  lint:
    name: 🔍 Lint (${{ matrix.package }})
    needs: [check-release, detect-affected]
    if: needs.check-release.outputs.is-release == 'false' && needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace
        with:
          package-group: ${{ fromJSON(needs.detect-affected.outputs.package-groups)[matrix.package] }}
          package-name: ${{ matrix.package }}

      - name: Run lint for ${{ matrix.package }}
        run: |
          echo "🔍 Linting ${{ matrix.package }}..."
          nx lint ${{ matrix.package }}

  test:
    name: 🧪 Test (${{ matrix.package }})
    needs: [check-release, detect-affected]
    if: needs.check-release.outputs.is-release == 'false' && needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace
        with:
          package-group: ${{ fromJSON(needs.detect-affected.outputs.package-groups)[matrix.package] }}
          package-name: ${{ matrix.package }}

      - name: Run tests for ${{ matrix.package }}
        run: |
          echo "🧪 Testing ${{ matrix.package }}..."
          nx test ${{ matrix.package }}

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: coverage/
          retention-days: 1

  # Phase 3: Build (Parallel per Package) - only for non-release branches
  build:
    name: 🏗️ Build (${{ matrix.package }})
    needs: [check-release, detect-affected, lint, test]
    if: needs.check-release.outputs.is-release == 'false' && needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace
        with:
          package-group: ${{ fromJSON(needs.detect-affected.outputs.package-groups)[matrix.package] }}
          package-name: ${{ matrix.package }}

      - name: Build ${{ matrix.package }}
        run: |
          echo "🏗️ Building ${{ matrix.package }}..."
          nx build ${{ matrix.package }}

      - name: Upload build artifacts for release
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.package }}
          path: |
            dist/packages/${{ matrix.package }}
            packages/${{ matrix.package }}/target/release/${{ matrix.package }}
          retention-days: 3
          if-no-files-found: warn

  # Summary
  summary:
    name: ✅ CI Build
    needs: [check-release, detect-affected, lint, test, build, validate-release]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Report build status
        run: |
          # Determine overall result based on branch type
          if [[ "${{ needs.check-release.outputs.is-release }}" == "true" ]]; then
            # Release branch validation
            if [[ "${{ needs.validate-release.result }}" == "success" ]]; then
              echo "✅ Release validation completed successfully"
              echo "📋 Git tags, changelog, and version updates validated"
            else
              echo "❌ Release validation failed"
              echo "📋 Missing git tags, changelog updates, or version bumps"
              exit 1
            fi
          else
            # Regular branch build validation
            # Check that detection ran and other jobs either succeeded or were skipped appropriately
            if [[ "${{ needs.detect-affected.result }}" == "success" ]]; then
              # If we have packages, check that build pipeline succeeded
              if [[ "${{ needs.detect-affected.outputs.has-packages }}" == "true" ]]; then
                if [[ ("${{ needs.lint.result }}" == "success") && 
                      ("${{ needs.test.result }}" == "success") && 
                      ("${{ needs.build.result }}" == "success") ]]; then
                  echo "✅ Build pipeline completed successfully"
                  echo "📋 All affected packages passed lint, test, and build"
                  echo "📦 Packages: ${{ needs.detect-affected.outputs.packages }}"
                else
                  echo "❌ Build pipeline failed"
                  echo "📋 One or more packages failed lint, test, or build"
                  echo "🔍 Lint: ${{ needs.lint.result }}, Test: ${{ needs.test.result }}, Build: ${{ needs.build.result }}"
                  exit 1
                fi
              else
                echo "✅ No packages affected - documentation or config changes only"
                echo "📋 Validation completed successfully"
              fi
            else
              echo "❌ Failed to detect affected packages"
              echo "📋 Detection job failed: ${{ needs.detect-affected.result }}"
              exit 1
            fi
          fi
