name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'packages/**'
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - 'tsconfig*.json'
      - '.github/workflows/ci.yml'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Phase 1: Detection
  detect-affected:
    name: üîç Detect Affected Packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.detect.outputs.packages }}
      has-packages: ${{ steps.detect.outputs.has-packages }}
      package-count: ${{ steps.detect.outputs.package-count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Detect affected packages
        id: detect
        run: |
          # Get affected projects with publish target
          AFFECTED=$(nx show projects --affected --with-target=publish --json || echo '[]')
          echo "üîç Affected packages detected: $AFFECTED"
          
          if [ "$AFFECTED" = "[]" ] || [ -z "$AFFECTED" ]; then
            echo "packages=[]" >> $GITHUB_OUTPUT
            echo "has-packages=false" >> $GITHUB_OUTPUT
            echo "package-count=0" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No affected packages found"
          else
            PACKAGE_COUNT=$(echo $AFFECTED | jq length)
            echo "packages=$AFFECTED" >> $GITHUB_OUTPUT
            echo "has-packages=true" >> $GITHUB_OUTPUT
            echo "package-count=$PACKAGE_COUNT" >> $GITHUB_OUTPUT
            echo "üéØ Found $PACKAGE_COUNT affected packages: $AFFECTED"
          fi

  # Phase 2: Validation (All Parallel)
  lint:
    name: üîç Lint
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache NX
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-lint-${{ matrix.package }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-lint-${{ matrix.package }}-

      - name: Run lint for ${{ matrix.package }}
        run: |
          echo "üîç Linting ${{ matrix.package }}..."
          nx run ${{ matrix.package }}:lint

  test:
    name: üß™ Test
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache NX
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-test-${{ matrix.package }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-test-${{ matrix.package }}-

      - name: Run tests for ${{ matrix.package }}
        run: |
          echo "üß™ Testing ${{ matrix.package }}..."
          nx run ${{ matrix.package }}:test --ci --code-coverage

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: coverage/
          retention-days: 7

  # Phase 3: Build (Parallel per Package)
  build:
    name: üèóÔ∏è Build
    needs: [detect-affected, lint, test]
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache NX
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-build-${{ matrix.package }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-build-${{ matrix.package }}-

      - name: Build ${{ matrix.package }}
        run: |
          echo "üèóÔ∏è Building ${{ matrix.package }}..."
          nx build ${{ matrix.package }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.package }}
          path: |
            packages/${{ matrix.package }}/dist/
            packages/${{ matrix.package }}/package.json
          retention-days: 7

  # Phase 4: Generate Release Notes (Parallel per Package)
  release-notes:
    name: üìù Release Notes
    needs: [detect-affected, build]
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse PR description for package changes
        id: version
        run: |
          echo "üìä Parsing PR description for ${{ matrix.package }}..."
          
          # Get package info
          PACKAGE_PATH="packages/${{ matrix.package }}"
          CURRENT_VERSION=$(jq -r '.version' $PACKAGE_PATH/package.json)
          PACKAGE_NAME=$(jq -r '.name' $PACKAGE_PATH/package.json)
          
          # Parse PR description to extract changes for this package
          PR_BODY="${{ github.event.pull_request.body }}"
          
          # Extract the section for this package from PR description
          PACKAGE_SECTION=""
          if echo "$PR_BODY" | grep -q "### $PACKAGE_NAME"; then
            PACKAGE_SECTION=$(echo "$PR_BODY" | sed -n "/### $PACKAGE_NAME/,/### /p" | sed '$d' | tail -n +2)
          elif echo "$PR_BODY" | grep -q "### ${{ matrix.package }}"; then
            PACKAGE_SECTION=$(echo "$PR_BODY" | sed -n "/### ${{ matrix.package }}/,/### /p" | sed '$d' | tail -n +2)
          fi
          
          # If no specific section found, check for Breaking Changes section
          BREAKING_SECTION=""
          if echo "$PR_BODY" | grep -q "## Breaking Changes" && ! echo "$PR_BODY" | grep -q "None"; then
            BREAKING_SECTION=$(echo "$PR_BODY" | sed -n "/## Breaking Changes/,/## /p" | sed '$d' | tail -n +2)
          fi
          
          # Determine bump type from changes
          BUMP_TYPE="patch"
          
          if [ -n "$BREAKING_SECTION" ] && [ "$BREAKING_SECTION" != "None" ]; then
            BUMP_TYPE="major"
          elif echo "$PACKAGE_SECTION" | grep -iE "^- feat" > /dev/null; then
            BUMP_TYPE="minor"
          elif echo "$PACKAGE_SECTION" | grep -iE "^- (fix|chore|docs)" > /dev/null; then
            BUMP_TYPE="patch"
          fi
          
          # Calculate new version
          if [ "$BUMP_TYPE" = "major" ]; then
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}')
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}')
          else
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
          fi
          
          echo "üìã Analysis: $BUMP_TYPE ($CURRENT_VERSION ‚Üí $NEW_VERSION)"
          echo "üìù Package changes:"
          echo "$PACKAGE_SECTION"
          
          echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "package-name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$PACKAGE_SECTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          echo "üìù Generating release notes for ${{ matrix.package }}..."
          
          PACKAGE_PATH="packages/${{ matrix.package }}"
          
          # Parse changes from PR description into categories
          FEATURES=""
          FIXES=""
          BREAKING=""
          OTHER=""
          
          # Get breaking changes from PR body if any
          PR_BODY="${{ github.event.pull_request.body }}"
          if echo "$PR_BODY" | grep -q "## Breaking Changes" && ! echo "$PR_BODY" | grep -q "None"; then
            BREAKING_SECTION=$(echo "$PR_BODY" | sed -n "/## Breaking Changes/,/## /p" | sed '$d' | tail -n +2)
            if [ -n "$BREAKING_SECTION" ]; then
              BREAKING="$BREAKING_SECTION"
            fi
          fi
          
          # Parse package-specific changes
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              if echo "$line" | grep -iE "^- feat" > /dev/null; then
                FEATURES="$FEATURES\n$line"
              elif echo "$line" | grep -iE "^- fix" > /dev/null; then
                FIXES="$FIXES\n$line"
              elif echo "$line" | grep -iE "^- (chore|docs|style|refactor|test)" > /dev/null; then
                OTHER="$OTHER\n$line"
              else
                OTHER="$OTHER\n$line"
              fi
            fi
          done <<< "${{ steps.version.outputs.changes }}"
          
          # Create release notes (clean, no preview block)
          cat > $PACKAGE_PATH/RELEASE_NOTES.md << EOF
          # Release notes
          
          ## ${{ steps.version.outputs.new-version }} ($(date +%Y-%m-%d))
          
          $(if [ -n "$BREAKING" ]; then echo "### üí• BREAKING CHANGES"; echo; echo -e "$BREAKING"; echo; fi)
          $(if [ -n "$FEATURES" ]; then echo "### ‚ú® Features"; echo; echo -e "$FEATURES"; echo; fi)
          $(if [ -n "$FIXES" ]; then echo "### üêõ Bug Fixes"; echo; echo -e "$FIXES"; echo; fi)
          $(if [ -n "$OTHER" ]; then echo "### üè† Internal"; echo; echo -e "$OTHER"; echo; fi)
          EOF
          
          # Create preview comment for this package
          cat > preview-${{ matrix.package }}.md << EOF
          ## üöÄ Release Preview for ${{ steps.version.outputs.package-name }}
          **Version**: ${{ steps.version.outputs.current-version }} ‚Üí **${{ steps.version.outputs.new-version }}** (${{ steps.version.outputs.bump-type }})
          **Branch**: \`${{ github.head_ref }}\`
          
          This will be published when the PR is merged.
          EOF
          
          echo "‚úÖ Release notes generated at $PACKAGE_PATH/RELEASE_NOTES.md"

      - name: Upload release notes and preview
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ matrix.package }}
          path: |
            packages/${{ matrix.package }}/RELEASE_NOTES.md
            preview-${{ matrix.package }}.md
          retention-days: 30

      - name: Create version info for release
        run: |
          cat > version-${{ matrix.package }}.json << EOF
          {
            "package": "${{ matrix.package }}",
            "name": "${{ steps.version.outputs.package-name }}",
            "currentVersion": "${{ steps.version.outputs.current-version }}",
            "newVersion": "${{ steps.version.outputs.new-version }}",
            "bumpType": "${{ steps.version.outputs.bump-type }}"
          }
          EOF

      - name: Upload version info
        uses: actions/upload-artifact@v4
        with:
          name: version-${{ matrix.package }}
          path: version-${{ matrix.package }}.json
          retention-days: 30

  # Phase 5: Post PR Comments (Parallel per Package)
  preview:
    name: üí¨ Post Preview
    needs: [detect-affected, release-notes]
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Download preview for ${{ matrix.package }}
        uses: actions/download-artifact@v4
        with:
          name: release-notes-${{ matrix.package }}

      - name: Post preview comment for ${{ matrix.package }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: preview-${{ matrix.package }}.md

  # Phase 6: Update Package Versions
  update-versions:
    name: üìù Update Package Versions
    needs: [detect-affected, release-notes]
    if: needs.detect-affected.outputs.has-packages == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Download all version info
        uses: actions/download-artifact@v4
        with:
          pattern: version-*
          merge-multiple: true

      - name: Download all release notes
        uses: actions/download-artifact@v4
        with:
          pattern: release-notes-*
          merge-multiple: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Update package.json files using NX
        run: |
          echo "üìù Updating package.json files with new versions..."
          
          # Get affected packages and update versions
          AFFECTED_PACKAGES=$(nx show projects --affected --with-target=publish --json | jq -r '.[]')
          
          for package in $AFFECTED_PACKAGES; do
            if [ -f "version-$package.json" ]; then
              new_version=$(jq -r '.newVersion' "version-$package.json")
              
              echo "Updating packages/$package/package.json to version $new_version"
              cd packages/$package
              pnpm version $new_version --no-git-tag-version
              cd - > /dev/null
              
              # Also copy the release notes
              if [ -f "RELEASE_NOTES.md" ]; then
                cp "RELEASE_NOTES.md" "packages/$package/"
                echo "Copied RELEASE_NOTES.md to packages/$package/"
              fi
            fi
          done

      - name: Commit version updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all package.json and release notes changes
          git add packages/*/package.json packages/*/RELEASE_NOTES.md
          
          if git diff --staged --quiet; then
            echo "No version changes to commit"
          else
            git commit -m "chore: update package versions for release

            ü§ñ Automated by CI workflow"
            git push
            echo "‚úÖ Version updates committed to PR"
          fi

  # Phase 7: Summary Comment
  persist-versions:
    name: üí¨ Post Summary
    needs: [detect-affected, preview, update-versions]
    if: needs.detect-affected.outputs.has-packages == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Post summary comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ‚úÖ CI Complete - Ready for Merge
            
            **Package versions have been updated** and are ready for release upon merge.
            
            When you merge this PR:
            1. Packages will be published to npm
            2. GitHub releases will be created
            3. You'll receive a confirmation comment with all the links
            
            ---
            *ü§ñ Automated by CI workflow*


  # No affected packages notification
  no-packages:
    name: ‚ÑπÔ∏è No Packages Affected
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: Report status
        run: |
          echo "‚ÑπÔ∏è No packages with publish targets were affected by this PR."
          echo "The changes appear to be documentation, configuration, or non-publishable code."
          echo "No release preview will be generated."