name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Only run when code changes, not just docs
    paths:
      - 'packages/**'
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - 'tsconfig*.json'
      - '.github/workflows/ci.yml'

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Single job that runs everything in parallel where possible
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Need full history for nx affected
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Derive base and head SHAs for nx affected
      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      # Cache NX results between runs
      - name: Cache NX
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      # Run affected targets in parallel
      - name: Run NX affected lint
        run: pnpm nx affected --target=lint --parallel=3

      - name: Run NX affected test
        run: pnpm nx affected --target=test --parallel=3 --ci --code-coverage

      - name: Run NX affected build
        run: pnpm nx affected --target=build --parallel=3

      # Upload coverage reports
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

      # Comment on PR with affected projects (optional but helpful)
      - name: Comment PR with affected projects
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const output = require('child_process')
              .execSync('pnpm nx show projects --affected', { encoding: 'utf-8' })
              .trim();
            
            if (output) {
              const projects = output.split('\n').filter(Boolean);
              const body = `### ðŸ“¦ Affected Projects\n\n${projects.map(p => `- ${p}`).join('\n')}`;
              
              // Find existing comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && comment.body.includes('ðŸ“¦ Affected Projects')
              );
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body
                });
              }
            }