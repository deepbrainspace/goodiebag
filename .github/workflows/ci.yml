name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'packages/**'
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'nx.json'
      - 'tsconfig*.json'
      - '.github/workflows/ci.yml'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Phase 1: Detection
  detect-affected:
    name: 🔍 Detect Affected Packages
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      packages: ${{ steps.detect.outputs.packages }}
      has-packages: ${{ steps.detect.outputs.has-packages }}
      package-count: ${{ steps.detect.outputs.package-count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '9.0.0'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Detect affected packages
        id: detect
        uses: ./.github/actions/detect-affected

  # Phase 2: Validation (Parallel per Package)
  lint:
    name: 🔍 Lint
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup workspace
        uses: ./.github/actions/setup-workspace

      - name: Run lint for ${{ matrix.package }}
        run: |
          echo "🔍 Linting ${{ matrix.package }}..."
          nx run ${{ matrix.package }}:lint

  test:
    name: 🧪 Test
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup workspace
        uses: ./.github/actions/setup-workspace

      - name: Run tests for ${{ matrix.package }}
        run: |
          echo "🧪 Testing ${{ matrix.package }}..."
          nx run ${{ matrix.package }}:test --ci --code-coverage

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: coverage/
          retention-days: 7

  # Phase 3: Build (Parallel per Package)
  build:
    name: 🏗️ Build
    needs: [detect-affected, lint, test]
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup workspace
        uses: ./.github/actions/setup-workspace

      - name: Build ${{ matrix.package }}
        run: |
          echo "🏗️ Building ${{ matrix.package }}..."
          nx build ${{ matrix.package }}

  # Summary
  summary:
    name: ✅ CI Summary
    needs: [detect-affected, lint, test, build]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Post CI summary
        run: |
          if [[ "${{ needs.detect-affected.outputs.has-packages }}" == "true" ]]; then
            echo "✅ CI completed for ${{ needs.detect-affected.outputs.package-count }} packages"
            echo "📦 Packages: ${{ needs.detect-affected.outputs.packages }}"
            echo ""
            echo "💡 To prepare for release, comment 'prepare_release' on this PR"
          else
            echo "ℹ️ No affected packages found - documentation or config changes only"
          fi

  # No affected packages notification  
  no-packages:
    name: ℹ️ No Packages Affected
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: Report status
        run: |
          echo "ℹ️ No packages with publish targets were affected by this PR."
          echo "The changes appear to be documentation, configuration, or non-publishable code."