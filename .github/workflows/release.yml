name: Release - Tagged Versions

on:
  push:
    tags:
      # Match tags like: nx-surrealdb-v1.0.0, mcp-server-claude-v2.1.0
      - '*-v*'

jobs:
  release:
    name: Release Package
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract package info from tag
        id: extract-info
        run: |
          # Tag format: package-name-vX.Y.Z
          TAG=${GITHUB_REF#refs/tags/}
          echo "Full tag: $TAG"
          
          # Extract version (everything after last 'v')
          VERSION=$(echo $TAG | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?' | sed 's/^v//')
          echo "Version: $VERSION"
          
          # Extract package name (everything before -vX.Y.Z)
          PACKAGE=$(echo $TAG | sed "s/-v${VERSION}$//")
          echo "Package: $PACKAGE"
          
          # Validate we have both
          if [ -z "$VERSION" ] || [ -z "$PACKAGE" ]; then
            echo "❌ Invalid tag format. Expected: package-name-vX.Y.Z"
            exit 1
          fi
          
          echo "package=$PACKAGE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache NX
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Verify package exists
        id: verify-package
        run: |
          # Check if the package exists in the workspace
          if ! pnpm nx show project ${{ steps.extract-info.outputs.package }} > /dev/null 2>&1; then
            echo "❌ Package '${{ steps.extract-info.outputs.package }}' not found in workspace"
            exit 1
          fi
          
          # Get package details
          PACKAGE_PATH=$(pnpm nx show project ${{ steps.extract-info.outputs.package }} --json | jq -r '.sourceRoot' | sed 's|/src||')
          PACKAGE_NAME=$(jq -r '.name' $PACKAGE_PATH/package.json)
          
          echo "path=$PACKAGE_PATH" >> $GITHUB_OUTPUT
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Build package
        run: pnpm nx build ${{ steps.extract-info.outputs.package }}

      - name: Run tests
        run: pnpm nx test ${{ steps.extract-info.outputs.package }}

      - name: Update package version
        run: |
          cd ${{ steps.verify-package.outputs.path }}
          npm version ${{ steps.extract-info.outputs.version }} --no-git-tag-version

      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm whoami

      - name: Publish to npm
        run: |
          cd ${{ steps.verify-package.outputs.path }}
          npm publish --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create package tarball
        id: create-tarball
        run: |
          cd ${{ steps.verify-package.outputs.path }}
          npm pack
          TARBALL=$(ls *.tgz)
          echo "tarball=${{ steps.verify-package.outputs.path }}/$TARBALL" >> $GITHUB_OUTPUT
          echo "filename=$TARBALL" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release-notes
        run: |
          # Get commits since last tag for this package
          LAST_TAG=$(git tag -l "${{ steps.extract-info.outputs.package }}-v*" --sort=-version:refname | sed -n '2p')
          
          if [ -z "$LAST_TAG" ]; then
            echo "First release for ${{ steps.extract-info.outputs.package }}"
            COMMITS=$(git log --pretty=format:"- %s (%an)" -n 10)
          else
            echo "Changes since $LAST_TAG"
            COMMITS=$(git log --pretty=format:"- %s (%an)" $LAST_TAG..HEAD -- "${{ steps.verify-package.outputs.path }}")
          fi
          
          # Create release notes
          cat > release-notes.md << EOF
          ## 🎉 Release ${{ steps.extract-info.outputs.version }}
          
          **Package**: \`${{ steps.verify-package.outputs.name }}\`
          **Version**: \`${{ steps.extract-info.outputs.version }}\`
          
          ### Installation
          
          \`\`\`bash
          # npm
          npm install ${{ steps.verify-package.outputs.name }}@${{ steps.extract-info.outputs.version }}
          
          # pnpm  
          pnpm add ${{ steps.verify-package.outputs.name }}@${{ steps.extract-info.outputs.version }}
          
          # yarn
          yarn add ${{ steps.verify-package.outputs.name }}@${{ steps.extract-info.outputs.version }}
          \`\`\`
          
          ### Changes
          
          $COMMITS
          
          ### Downloads
          
          - 📦 npm: [${{ steps.verify-package.outputs.name }}@${{ steps.extract-info.outputs.version }}](https://www.npmjs.com/package/${{ steps.verify-package.outputs.name }}/v/${{ steps.extract-info.outputs.version }})
          - 📎 Tarball: See release assets below
          EOF

      - name: Create GitHub release
        uses: actions/create-release@v1
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract-info.outputs.tag }}
          release_name: ${{ steps.extract-info.outputs.package }} v${{ steps.extract-info.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball }}
          asset_name: ${{ steps.create-tarball.outputs.filename }}
          asset_content_type: application/gzip

      - name: Report success
        run: |
          echo "✅ Successfully released ${{ steps.verify-package.outputs.name }}@${{ steps.extract-info.outputs.version }}"
          echo "📦 npm: https://www.npmjs.com/package/${{ steps.verify-package.outputs.name }}/v/${{ steps.extract-info.outputs.version }}"
          echo "🐙 GitHub: ${{ steps.create-release.outputs.html_url }}"