name: üöÄ Release

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  release:
    name: Tag and Publish
    runs-on: ubuntu-latest
    # Only run if PR was merged and came from a release/* branch
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace

      - name: Extract release info
        id: extract
        run: |
          # Extract package and version from release branch name
          # Expected format: "release/package-name@1.2.3"
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          if [[ $BRANCH_NAME =~ release/([^@]+)@([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            PACKAGE_NAME="${BASH_REMATCH[1]}"
            VERSION="${BASH_REMATCH[2]}"
            TAG_NAME="${PACKAGE_NAME}@${VERSION}"
            
            echo "package=$PACKAGE_NAME" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            
            echo "üì¶ Package: $PACKAGE_NAME"
            echo "üè∑Ô∏è Version: $VERSION"  
            echo "üè∑Ô∏è Tag: $TAG_NAME"
          else
            echo "‚ùå Could not extract release info from branch name: $BRANCH_NAME"
            exit 1
          fi

      - name: Download CI build artifacts
        uses: dawidd6/action-download-artifact@v11
        with:
          name: build-${{ steps.extract.outputs.package }}
          workflow: ci.yml
          path: dist/packages/${{ steps.extract.outputs.package }}

      - name: Verify artifacts exist
        run: |
          if [ ! -d "dist/packages/${{ steps.extract.outputs.package }}" ]; then
            echo "‚ùå Build artifacts not found for ${{ steps.extract.outputs.package }}"
            exit 1
          fi
          
          echo "‚úÖ Build artifacts verified for ${{ steps.extract.outputs.package }}"
          ls -la "dist/packages/${{ steps.extract.outputs.package }}"

      - name: Create and push tag
        run: |
          git tag "${{ steps.extract.outputs.tag }}"
          git push origin "${{ steps.extract.outputs.tag }}"
          echo "‚úÖ Tag ${{ steps.extract.outputs.tag }} created and pushed"

      - name: Publish to registries
        run: |
          echo "üì¶ Publishing ${{ steps.extract.outputs.package }}@${{ steps.extract.outputs.version }}..."
          nx run ${{ steps.extract.outputs.package }}:nx-release-publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  no-release:
    name: No release detected
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged != true || !startsWith(github.event.pull_request.head.ref, 'release/')
    
    steps:
      - name: Skip release
        run: |
          echo "‚ÑπÔ∏è PR detected but not a merged release branch PR."
          echo "PR merged: ${{ github.event.pull_request.merged }}"
          echo "Head ref: ${{ github.event.pull_request.head.ref }}"
          echo "No release actions will be performed."