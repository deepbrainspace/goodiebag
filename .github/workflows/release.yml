name: Release

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'packages/**'
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Phase 1: Detect affected packages (reuse CI logic)
  detect-affected:
    name: üîç Detect Affected Packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.detect.outputs.packages }}
      has-packages: ${{ steps.detect.outputs.has-packages }}
      package-count: ${{ steps.detect.outputs.package-count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Detect affected packages
        id: detect
        run: |
          # Get affected projects with publish target
          AFFECTED=$(nx show projects --affected --with-target=publish --json || echo '[]')
          echo "üîç Affected packages detected: $AFFECTED"
          
          if [ "$AFFECTED" = "[]" ] || [ -z "$AFFECTED" ]; then
            echo "packages=[]" >> $GITHUB_OUTPUT
            echo "has-packages=false" >> $GITHUB_OUTPUT
            echo "package-count=0" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No affected packages found"
          else
            PACKAGE_COUNT=$(echo $AFFECTED | jq length)
            echo "packages=$AFFECTED" >> $GITHUB_OUTPUT
            echo "has-packages=true" >> $GITHUB_OUTPUT
            echo "package-count=$PACKAGE_COUNT" >> $GITHUB_OUTPUT
            echo "üéØ Found $PACKAGE_COUNT affected packages: $AFFECTED"
          fi

  # Phase 2: Download version mapping from CI
  download-versions:
    name: üì• Download Version Mapping
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'true'
    runs-on: ubuntu-latest
    outputs:
      version-mapping: ${{ steps.load-versions.outputs.mapping }}
    
    steps:
      - name: Download version mapping from CI
        uses: actions/download-artifact@v4
        with:
          name: version-mapping
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Load version mapping
        id: load-versions
        run: |
          echo "üì• Loading version mapping from CI analysis..."
          if [ -f version-mapping.json ]; then
            MAPPING=$(cat version-mapping.json)
            echo "üìã Version mapping loaded:"
            echo "$MAPPING" | jq .
            echo "mapping=$MAPPING" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No version mapping found - falling back to patch versions"
            echo '{}' > fallback-mapping.json
            echo "mapping={}" >> $GITHUB_OUTPUT
          fi

  # Phase 3: Apply cached builds (from CI) and publish (parallel per package)
  publish:
    name: üì¶ Publish
    needs: [detect-affected, download-versions]
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    outputs:
      published-${{ matrix.package }}: ${{ steps.publish.outputs.success }}
      version-${{ matrix.package }}: ${{ steps.publish.outputs.version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache NX (restore from CI)
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-build-${{ matrix.package }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-build-${{ matrix.package }}-

      - name: Build ${{ matrix.package }} (use cache)
        run: |
          echo "üèóÔ∏è Building ${{ matrix.package }} (should hit cache)..."
          nx build ${{ matrix.package }}

      - name: Apply semantic version and publish
        id: publish
        run: |
          echo "üì¶ Publishing ${{ matrix.package }}..."
          
          # Get package info
          PACKAGE_PATH="packages/${{ matrix.package }}"
          CURRENT_VERSION=$(jq -r '.version' $PACKAGE_PATH/package.json)
          PACKAGE_NAME=$(jq -r '.name' $PACKAGE_PATH/package.json)
          
          # Get version from CI analysis
          VERSION_MAPPING='${{ needs.download-versions.outputs.version-mapping }}'
          
          if [ "$VERSION_MAPPING" != "{}" ] && [ -n "$VERSION_MAPPING" ]; then
            NEW_VERSION=$(echo "$VERSION_MAPPING" | jq -r --arg pkg "${{ matrix.package }}" '.[$pkg].version // empty')
            BUMP_TYPE=$(echo "$VERSION_MAPPING" | jq -r --arg pkg "${{ matrix.package }}" '.[$pkg].bumpType // "patch"')
            
            if [ -z "$NEW_VERSION" ] || [ "$NEW_VERSION" = "null" ]; then
              echo "‚ö†Ô∏è No version found in mapping for ${{ matrix.package }}, calculating patch bump"
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
              BUMP_TYPE="patch"
            fi
          else
            echo "‚ö†Ô∏è No version mapping available, calculating patch bump"
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
            BUMP_TYPE="patch"
          fi
          
          # Set npm tag based on branch and bump type
          if [ "${{ github.ref_name }}" = "main" ]; then
            if [ "$BUMP_TYPE" = "major" ]; then
              NPM_TAG="latest"
            else
              NPM_TAG="next"
            fi
          else
            NPM_TAG="dev"
          fi
          
          echo "üìã Package: $PACKAGE_NAME"
          echo "üìã Current Version: $CURRENT_VERSION"
          echo "üìã New Version: $NEW_VERSION ($BUMP_TYPE)"
          echo "üìã npm tag: $NPM_TAG"
          
          # Update package.json version
          cd $PACKAGE_PATH
          pnpm version $NEW_VERSION --no-git-tag-version
          
          # Configure npm
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          
          # Publish to npm
          echo "üì§ Publishing to npm..."
          pnpm publish --tag $NPM_TAG --access public
          
          # Create tarball for GitHub release
          pnpm pack
          
          echo "success=true" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "npm-tag=$NPM_TAG" >> $GITHUB_OUTPUT
          echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Successfully published $PACKAGE_NAME@$NEW_VERSION ($BUMP_TYPE)"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload package tarball
        uses: actions/upload-artifact@v4
        with:
          name: tarball-${{ matrix.package }}
          path: packages/${{ matrix.package }}/*.tgz
          retention-days: 30

  # Phase 4: GitHub Releases (parallel per package)
  github-release:
    name: üè∑Ô∏è GitHub Release
    needs: [detect-affected, download-versions, publish]
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download package tarball
        uses: actions/download-artifact@v4
        with:
          name: tarball-${{ matrix.package }}
          path: ./

      - name: Create GitHub release for ${{ matrix.package }}
        run: |
          echo "üè∑Ô∏è Creating GitHub release for ${{ matrix.package }}..."
          
          # Get package info
          PACKAGE_PATH="packages/${{ matrix.package }}"
          PACKAGE_NAME=$(jq -r '.name' $PACKAGE_PATH/package.json)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Get version from CI analysis (same as publish job)
          VERSION_MAPPING='${{ needs.download-versions.outputs.version-mapping }}'
          
          if [ "$VERSION_MAPPING" != "{}" ] && [ -n "$VERSION_MAPPING" ]; then
            NEW_VERSION=$(echo "$VERSION_MAPPING" | jq -r --arg pkg "${{ matrix.package }}" '.[$pkg].version // empty')
            BUMP_TYPE=$(echo "$VERSION_MAPPING" | jq -r --arg pkg "${{ matrix.package }}" '.[$pkg].bumpType // "patch"')
            
            if [ -z "$NEW_VERSION" ] || [ "$NEW_VERSION" = "null" ]; then
              CURRENT_VERSION=$(jq -r '.version' $PACKAGE_PATH/package.json)
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
              BUMP_TYPE="patch"
            fi
          else
            CURRENT_VERSION=$(jq -r '.version' $PACKAGE_PATH/package.json)
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
            BUMP_TYPE="patch"
          fi
          
          # Determine release type
          if [ "${{ github.ref_name }}" = "main" ]; then
            if [ "$BUMP_TYPE" = "major" ]; then
              RELEASE_TYPE="Major Release"
            elif [ "$BUMP_TYPE" = "minor" ]; then
              RELEASE_TYPE="Minor Release"
            else
              RELEASE_TYPE="Patch Release"
            fi
          else
            RELEASE_TYPE="Development Preview"
          fi
          
          # Create tag name
          TAG_NAME="${{ matrix.package }}-${NEW_VERSION}"
          
          # Get recent commits for release notes
          RECENT_COMMITS=$(git log --oneline -n 5 -- $PACKAGE_PATH/ | head -5 || echo "- Initial release")
          
          # Generate release notes
          cat > release-notes.md << EOF
          ## üöÄ $RELEASE_TYPE
          
          **Package**: \`$PACKAGE_NAME\`
          **Version**: \`$NEW_VERSION\` ($BUMP_TYPE)
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          
          ### Installation
          
          \`\`\`bash
          # npm
          npm install $PACKAGE_NAME@$NEW_VERSION
          
          # pnpm
          pnpm add $PACKAGE_NAME@$NEW_VERSION
          
          # yarn
          yarn add $PACKAGE_NAME@$NEW_VERSION
          \`\`\`
          
          ### Recent Changes
          
          $(echo "$RECENT_COMMITS" | sed 's/^/- /')
          
          ---
          
          > üîÑ This is an automated release from the ${{ github.ref_name }} branch.
          EOF
          
          # Find tarball
          TARBALL=$(find . -name "*.tgz" -type f | head -1)
          if [ -z "$TARBALL" ]; then
            echo "‚ùå No tarball found for ${{ matrix.package }}"
            exit 1
          fi
          
          # Create release
          gh release create $TAG_NAME $TARBALL \
            --title "${{ matrix.package }} $NEW_VERSION" \
            --notes-file release-notes.md \
            --prerelease=true \
            --target ${{ github.sha }}
          
          echo "‚úÖ GitHub release created: $TAG_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase 5: Commit version updates back to repo
  finalize:
    name: üîÑ Commit Version Updates
    needs: [detect-affected, download-versions, publish, github-release]
    if: needs.detect-affected.outputs.has-packages == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          pattern: release-notes-*
          merge-multiple: true

      - name: Update package versions and commit
        run: |
          echo "üîÑ Updating package versions..."
          
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          CHANGED_FILES=""
          RELEASED_PACKAGES=""
          
          # Get version mapping from CI analysis
          VERSION_MAPPING='${{ needs.download-versions.outputs.version-mapping }}'
          
          # Update each affected package
          echo '${{ needs.detect-affected.outputs.packages }}' | jq -r '.[]' | while read package; do
            PACKAGE_PATH="packages/$package"
            PACKAGE_NAME=$(jq -r '.name' $PACKAGE_PATH/package.json)
            CURRENT_VERSION=$(jq -r '.version' $PACKAGE_PATH/package.json)
            
            # Get semantic version from CI analysis
            if [ "$VERSION_MAPPING" != "{}" ] && [ -n "$VERSION_MAPPING" ]; then
              NEW_VERSION=$(echo "$VERSION_MAPPING" | jq -r --arg pkg "$package" '.[$pkg].version // empty')
              BUMP_TYPE=$(echo "$VERSION_MAPPING" | jq -r --arg pkg "$package" '.[$pkg].bumpType // "patch"')
              
              if [ -z "$NEW_VERSION" ] || [ "$NEW_VERSION" = "null" ]; then
                NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
                BUMP_TYPE="patch"
              fi
            else
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
              BUMP_TYPE="patch"
            fi
            
            echo "Updating $PACKAGE_PATH/package.json to $NEW_VERSION"
            cd $PACKAGE_PATH
            pnpm version $NEW_VERSION --no-git-tag-version
            cd - > /dev/null
            
            echo "$PACKAGE_PATH/package.json" >> changed_files.txt
            echo "- $PACKAGE_NAME@$NEW_VERSION ($BUMP_TYPE)" >> released_packages.txt
            
            # Also commit the release notes
            if [ -f "RELEASE_NOTES.md" ]; then
              cp "RELEASE_NOTES.md" "$PACKAGE_PATH/"
              echo "$PACKAGE_PATH/RELEASE_NOTES.md" >> changed_files.txt
              echo "  üìù Release notes updated" >> released_packages.txt
            fi
          done
          
          # Check if we have changes to commit
          if [ -f changed_files.txt ] && [ -s changed_files.txt ]; then
            git add $(cat changed_files.txt)
            
            # Create commit message
            cat > commit_message.txt << EOF
          chore: release versions
          
          üì¶ Automated semantic version updates from AI analysis
          
          Packages released:
          $(cat released_packages.txt)
          
          ü§ñ Generated with AI-Driven Release Pipeline
          
          Co-Authored-By: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          EOF
            
            git commit -F commit_message.txt
            git push origin ${{ github.ref_name }}
            echo "‚úÖ Version updates committed and pushed"
          else
            echo "‚ÑπÔ∏è No version files to commit"
          fi

  # No affected packages notification
  no-packages:
    name: ‚ÑπÔ∏è No Packages to Release
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: Report status
        run: |
          echo "‚ÑπÔ∏è No packages with publish targets were affected by this push."
          echo "No releases will be created."