name: Release

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'packages/**'
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Phase 1: Detect affected packages (reuse CI logic)
  detect-affected:
    name: üîç Detect Affected Packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.detect.outputs.packages }}
      has-packages: ${{ steps.detect.outputs.has-packages }}
      package-count: ${{ steps.detect.outputs.package-count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Detect affected packages
        id: detect
        run: |
          # Get affected projects with publish target
          AFFECTED=$(nx show projects --affected --with-target=publish --json || echo '[]')
          echo "üîç Affected packages detected: $AFFECTED"
          
          if [ "$AFFECTED" = "[]" ] || [ -z "$AFFECTED" ]; then
            echo "packages=[]" >> $GITHUB_OUTPUT
            echo "has-packages=false" >> $GITHUB_OUTPUT
            echo "package-count=0" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No affected packages found"
          else
            PACKAGE_COUNT=$(echo $AFFECTED | jq length)
            echo "packages=$AFFECTED" >> $GITHUB_OUTPUT
            echo "has-packages=true" >> $GITHUB_OUTPUT
            echo "package-count=$PACKAGE_COUNT" >> $GITHUB_OUTPUT
            echo "üéØ Found $PACKAGE_COUNT affected packages: $AFFECTED"
          fi


  # Phase 2: NPM Publish (parallel per package)
  npm-publish:
    name: üì¶ NPM Publish
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache NX (restore from CI)
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-build-${{ matrix.package }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-build-${{ matrix.package }}-

      - name: Build ${{ matrix.package }} (use cache)
        run: |
          echo "üèóÔ∏è Building ${{ matrix.package }} (should hit cache)..."
          nx build ${{ matrix.package }}

      - name: Get package info
        id: info
        run: |
          echo "üì¶ Getting package info for ${{ matrix.package }}..."
          
          # Get package info
          PACKAGE_PATH="packages/${{ matrix.package }}"
          PACKAGE_NAME=$(jq -r '.name' $PACKAGE_PATH/package.json)
          VERSION=$(jq -r '.version' $PACKAGE_PATH/package.json)
          
          # Determine npm tag based on version
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Semantic version - check if major bump
            MAJOR=$(echo $VERSION | cut -d. -f1)
            if [ "$MAJOR" -gt 0 ]; then
              NPM_TAG="latest"
            else
              NPM_TAG="next"
            fi
          else
            NPM_TAG="dev"
          fi
          
          echo "üìã Package: $PACKAGE_NAME"
          echo "üìã Version: $VERSION"
          echo "üìã npm tag: $NPM_TAG"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "npm-tag=$NPM_TAG" >> $GITHUB_OUTPUT
          echo "package-name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Publish to NPM
        run: |
          echo "üì§ Publishing ${{ steps.info.outputs.package-name }} to npm..."
          
          # Configure npm
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          
          # Publish to npm
          cd packages/${{ matrix.package }}
          pnpm publish --tag ${{ steps.info.outputs.npm-tag }} --access public
          
          echo "‚úÖ Successfully published ${{ steps.info.outputs.package-name }}@${{ steps.info.outputs.version }}"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Phase 3: GitHub Releases (parallel per package)
  github-release:
    name: üè∑Ô∏è GitHub Release
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'true'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-affected.outputs.packages) }}
      fail-fast: false
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create package tarball
        run: |
          cd packages/${{ matrix.package }}
          pnpm pack
          mv *.tgz ../../

      - name: Create GitHub release for ${{ matrix.package }}
        run: |
          echo "üè∑Ô∏è Creating GitHub release for ${{ matrix.package }}..."
          
          # Get package info
          PACKAGE_PATH="packages/${{ matrix.package }}"
          PACKAGE_NAME=$(jq -r '.name' $PACKAGE_PATH/package.json)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Get current version from package.json
          VERSION=$(jq -r '.version' $PACKAGE_PATH/package.json)
          
          # Determine release type from version
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Semantic version - determine type
            PREV_VERSION=$(git show HEAD~1:$PACKAGE_PATH/package.json | jq -r '.version' || echo "0.0.0")
            
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            PREV_MAJOR=$(echo $PREV_VERSION | cut -d. -f1)
            PREV_MINOR=$(echo $PREV_VERSION | cut -d. -f2)
            PREV_PATCH=$(echo $PREV_VERSION | cut -d. -f3)
            
            if [ "$MAJOR" -gt "$PREV_MAJOR" ]; then
              RELEASE_TYPE="Major Release"
              BUMP_TYPE="major"
            elif [ "$MINOR" -gt "$PREV_MINOR" ]; then
              RELEASE_TYPE="Minor Release"
              BUMP_TYPE="minor"
            else
              RELEASE_TYPE="Patch Release"
              BUMP_TYPE="patch"
            fi
          else
            RELEASE_TYPE="Development Preview"
            BUMP_TYPE="dev"
          fi
          
          # Create tag name
          TAG_NAME="${{ matrix.package }}-v${VERSION}"
          
          # Get recent commits for release notes
          RECENT_COMMITS=$(git log --oneline -n 5 -- $PACKAGE_PATH/ | head -5 || echo "- Initial release")
          
          # Generate release notes
          cat > release-notes.md << EOF
          ## üöÄ $RELEASE_TYPE
          
          **Package**: \`$PACKAGE_NAME\`
          **Version**: \`$VERSION\` ($BUMP_TYPE)
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          
          ### Installation
          
          \`\`\`bash
          # npm
          npm install $PACKAGE_NAME@$NEW_VERSION
          
          # pnpm
          pnpm add $PACKAGE_NAME@$NEW_VERSION
          
          # yarn
          yarn add $PACKAGE_NAME@$NEW_VERSION
          \`\`\`
          
          ### Recent Changes
          
          $(echo "$RECENT_COMMITS" | sed 's/^/- /')
          
          ---
          
          > üîÑ This is an automated release from the ${{ github.ref_name }} branch.
          EOF
          
          # Find tarball
          TARBALL=$(find . -name "*.tgz" -type f | head -1)
          if [ -z "$TARBALL" ]; then
            echo "‚ùå No tarball found for ${{ matrix.package }}"
            exit 1
          fi
          
          # Create release
          gh release create $TAG_NAME $TARBALL \
            --title "${{ matrix.package }} $NEW_VERSION" \
            --notes-file release-notes.md \
            --prerelease=true \
            --target ${{ github.sha }}
          
          echo "‚úÖ GitHub release created: $TAG_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase 4: Finalize
  finalize:
    name: üîÑ Finalize Release
    needs: [detect-affected, npm-publish, github-release]
    if: needs.detect-affected.outputs.has-packages == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          pattern: release-notes-*
          merge-multiple: true

      - name: Check for uncommitted changes
        run: |
          echo "üîç Checking for any uncommitted changes..."
          
          if ! git diff --quiet || ! git diff --staged --quiet; then
            echo "‚ö†Ô∏è Found uncommitted changes:"
            git status --short
            
            # Commit any remaining changes
            git add -A
            git commit -m "chore: finalize release

            ü§ñ Automated by Release Pipeline
            
            Co-Authored-By: github-actions[bot] <github-actions[bot]@users.noreply.github.com>" || echo "No changes to commit"
            
            git push origin ${{ github.ref_name }}
            echo "‚úÖ Changes committed and pushed"
          else
            echo "‚úÖ Working tree is clean"
          fi

  # Phase 5: Post release confirmation comment
  release-comment:
    name: üí¨ Post Release Confirmation
    needs: [detect-affected, npm-publish, github-release, finalize]
    if: needs.detect-affected.outputs.has-packages == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Find PR that was merged
        id: find-pr
        run: |
          echo "üîç Finding the PR that was merged..."
          
          # Get the merge commit message to extract PR number
          MERGE_MESSAGE=$(git log -1 --pretty=%B)
          echo "Merge commit message: $MERGE_MESSAGE"
          
          # Extract PR number from merge commit message (format: "Merge pull request #123")
          PR_NUMBER=$(echo "$MERGE_MESSAGE" | grep -oP '(?<=#)\d+' | head -1)
          
          if [ -z "$PR_NUMBER" ]; then
            # Try GitHub API as fallback
            PR_NUMBER=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/pulls --jq '.[0].number' 2>/dev/null || echo "")
          fi
          
          if [ -n "$PR_NUMBER" ]; then
            echo "‚úÖ Found PR #$PR_NUMBER"
            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Could not find PR number"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release confirmation comment
        run: |
          echo "üìù Generating release confirmation..."
          
          # Create comment header
          cat > release-comment.md << 'EOF'
          ## ‚úÖ Release Completed Successfully!
          
          All packages have been published to npm and GitHub releases have been created.
          
          ### üì¶ Published Packages:
          EOF
          
          # Add package details for each affected package
          echo '${{ needs.detect-affected.outputs.packages }}' | jq -r '.[]' | while read package; do
            PACKAGE_PATH="packages/$package"
            if [ -d "$PACKAGE_PATH" ]; then
              PACKAGE_NAME=$(jq -r '.name' $PACKAGE_PATH/package.json)
              VERSION=$(jq -r '.version' $PACKAGE_PATH/package.json)
              
              # Determine bump type from version change
              PREV_VERSION=$(git show HEAD~1:$PACKAGE_PATH/package.json 2>/dev/null | jq -r '.version' || echo "0.0.0")
              if [ "$(echo $VERSION | cut -d. -f1)" -gt "$(echo $PREV_VERSION | cut -d. -f1)" ]; then
                BUMP_TYPE="major"
              elif [ "$(echo $VERSION | cut -d. -f2)" -gt "$(echo $PREV_VERSION | cut -d. -f2)" ]; then
                BUMP_TYPE="minor"
              else
                BUMP_TYPE="patch"
              fi
              
              cat >> release-comment.md << EOF
          
          #### üì¶ \`$PACKAGE_NAME@$VERSION\` ($BUMP_TYPE)
          - **npm**: [\`npm install $PACKAGE_NAME@$VERSION\`](https://www.npmjs.com/package/$PACKAGE_NAME/v/$VERSION)
          - **GitHub Release**: [View Release](https://github.com/${{ github.repository }}/releases/tag/$package-v$VERSION)
          - **Changelog**: [View RELEASE_NOTES.md](https://github.com/${{ github.repository }}/blob/main/packages/$package/RELEASE_NOTES.md)
          EOF
            fi
          done
          
          # Add footer
          cat >> release-comment.md << 'EOF'
          
          ---
          
          ### üöÄ Installation
          
          To install the latest versions:
          ```bash
          # Using npm
          npm install @deepbrainspace/[package-name]@latest
          
          # Using pnpm
          pnpm add @deepbrainspace/[package-name]@latest
          ```
          
          ### üìã Next Steps
          - Test the released packages in your projects
          - Report any issues in the [issue tracker](https://github.com/${{ github.repository }}/issues)
          
          ---
          *ü§ñ Automated by GitHub Actions Release Pipeline*
          EOF

      - name: Post release confirmation comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ steps.find-pr.outputs.pr-number }}
          body-path: release-comment.md

  # No affected packages notification
  no-packages:
    name: ‚ÑπÔ∏è No Packages to Release
    needs: detect-affected
    if: needs.detect-affected.outputs.has-packages == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: Report status
        run: |
          echo "‚ÑπÔ∏è No packages with publish targets were affected by this push."
          echo "No releases will be created."