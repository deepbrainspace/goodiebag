name: üìù Changelog Generation

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      package:
        description: 'Specific package to release'
        required: false
        type: string
      version:
        description: 'Version bump type'
        required: false
        type: choice
        default: ''
        options:
          - ''
          - patch
          - minor
          - major

jobs:
  detect:
    name: Detect
    runs-on: ubuntu-latest
    # Skip if PR has 'do-not-release' label (only for PR triggers, not manual)
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'do-not-release'))
    outputs:
      has-packages: ${{ steps.detect.outputs.has-packages }}
      packages: ${{ steps.detect.outputs.packages }}
      package-count: ${{ steps.detect.outputs.package-count }}
      package-groups: ${{ steps.detect.outputs.package-groups }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace

      - name: Detect affected packages
        id: detect
        uses: ./.github/actions/detect-affected
        with:
          package: ${{ github.event.inputs.package || '' }}

  changelog:
    name: Changelog ${{ matrix.package }}
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has-packages == 'true'
    
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect.outputs.packages) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace
        with:
          package-group: ${{ fromJson(needs.detect.outputs.package-groups)[matrix.package] }}
          package-name: ${{ matrix.package }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Prepare release (skip publish)
        id: prepare
        run: |
          echo "üìù Preparing changelog for ${{ matrix.package }}..."
          
          VERSION_INPUT="${{ github.event.inputs.version }}"
          if [ -z "$VERSION_INPUT" ]; then
            echo "üìã Using automatic version determination from conventional commits"
            VERSION_CMD="nx release --projects=${{ matrix.package }} --skip-publish --yes"
          else
            echo "üìã Using manual version bump: $VERSION_INPUT"
            VERSION_CMD="nx release $VERSION_INPUT --projects=${{ matrix.package }} --skip-publish --yes"
          fi

          echo "üéØ Executing: $VERSION_CMD"
          $VERSION_CMD
          
          # Get new version for branch naming
          NEW_VERSION=$(node -p "require('./packages/${{ matrix.package }}/package.json').version")
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create release branch and PR
        run: |
          BRANCH_NAME="release/${{ matrix.package }}@${{ steps.prepare.outputs.new-version }}"
          
          git checkout -b "$BRANCH_NAME"
          git add .
          git commit -m "release(${{ matrix.package }}): prepare v${{ steps.prepare.outputs.new-version }}"
          git push origin "$BRANCH_NAME"
          
          gh pr create \
            --title "üöÄ Release ${{ matrix.package }}@${{ steps.prepare.outputs.new-version }}" \
            --body "Release preparation for ${{ matrix.package }} v${{ steps.prepare.outputs.new-version }}" \
            --base main \
            --head "$BRANCH_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  no-packages:
    name: No packages to release
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has-packages == 'false'

    steps:
      - name: No packages affected
        run: |
          echo "‚ÑπÔ∏è No packages with publish targets were affected by recent changes."
          echo "The changes appear to be documentation, configuration, or non-publishable code."
