name: üìù Changelog Generation

on:
  pull_request:
    types: [closed]
    branches: 
      - main
      - '!release/**'
  workflow_dispatch:
    inputs:
      package:
        description: 'Specific package to release'
        required: true
        type: choice
        options:
          - nx-rust
          - nx-surrealdb
          - claude-code-toolkit
          - goodiebag
      version:
        description: 'Version bump type'
        required: false
        type: choice
        default: ''
        options:
          - ''
          - patch
          - minor
          - major

jobs:
  detect:
    name: Detect
    runs-on: ubuntu-latest
    # Skip if PR has 'do-not-release' label (only for PR triggers, not manual)
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'do-not-release'))
    outputs:
      has-packages: ${{ steps.detect.outputs.has-packages || steps.affected.outputs.has-packages }}
      packages: ${{ steps.detect.outputs.packages || steps.affected.outputs.packages }}
      package-count: ${{ steps.detect.outputs.package-count || steps.affected.outputs.package-count }}
      package-groups: ${{ steps.detect.outputs.package-groups || steps.affected.outputs.package-groups }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace

      - name: Handle manual vs automatic detection
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - use specified package
            PACKAGE="${{ github.event.inputs.package }}"
            echo "üéØ Manual package specified: $PACKAGE"
            echo "packages=[\"$PACKAGE\"]" >> $GITHUB_OUTPUT
            echo "has-packages=true" >> $GITHUB_OUTPUT
            echo "package-count=1" >> $GITHUB_OUTPUT
            
            # Determine package group from nx.json
            PACKAGE_GROUP=""
            if [[ "$PACKAGE" == nx-* ]]; then
              PACKAGE_GROUP="nx-plugins"
            elif [[ "$PACKAGE" == "claude-code-toolkit" ]]; then
              PACKAGE_GROUP="rust-packages"
            elif [[ "$PACKAGE" == "goodiebag" ]]; then
              PACKAGE_GROUP="workspace"
            fi
            echo "package-groups={\"$PACKAGE\": \"$PACKAGE_GROUP\"}" >> $GITHUB_OUTPUT
          else
            # Automatic detection for PR merges
            echo "üîç Using automatic affected detection"
          fi

      - name: Detect affected packages (PR only)
        id: affected
        if: github.event_name != 'workflow_dispatch'
        uses: ./.github/actions/detect-affected

  changelog:
    name: Changelog ${{ matrix.package }}
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has-packages == 'true'
    
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect.outputs.packages) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace
        with:
          package-group: ${{ fromJson(needs.detect.outputs.package-groups)[matrix.package] }}
          package-name: ${{ matrix.package }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Prepare release (skip publish)
        run: |
          echo "üìù Preparing changelog for ${{ matrix.package }}..."
          
          VERSION_INPUT="${{ github.event.inputs.version }}"
          if [ -z "$VERSION_INPUT" ]; then
            echo "üìã Using automatic version determination from conventional commits"
            VERSION_CMD="nx release --projects=${{ matrix.package }} --skip-publish --yes"
          else
            echo "üìã Using manual version bump: $VERSION_INPUT"
            VERSION_CMD="nx release $VERSION_INPUT --projects=${{ matrix.package }} --skip-publish --yes"
          fi

          echo "üéØ Executing: $VERSION_CMD"
          $VERSION_CMD

      - name: Create release branch and PR
        run: |
          # Extract version from the git commit that NX just made
          # NX creates commits in format: "release(package-name): v1.2.3" per conventional commits
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Last commit: $LAST_COMMIT_MSG"
          
          # Extract version from NX commit message pattern
          if [[ $LAST_COMMIT_MSG =~ release\(([^)]+)\):\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            PACKAGE_NAME="${BASH_REMATCH[1]}"
            VERSION="${BASH_REMATCH[2]}"
            BRANCH_NAME="release/${PACKAGE_NAME}@${VERSION}"
            
            echo "üì¶ Package: $PACKAGE_NAME, Version: $VERSION"
            echo "üåø Branch: $BRANCH_NAME"
            
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            
            gh pr create \
              --title "üöÄ Release Request for ${PACKAGE_NAME}@${VERSION}" \
              --body "Release request for ${PACKAGE_NAME} v${VERSION}" \
              --base main \
              --head "$BRANCH_NAME"
          else
            echo "‚ùå Could not extract version from commit message: $LAST_COMMIT_MSG"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  no-packages:
    name: No packages to release
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has-packages == 'false'

    steps:
      - name: No packages affected
        run: |
          echo "‚ÑπÔ∏è No packages with publish targets were affected by recent changes."
          echo "The changes appear to be documentation, configuration, or non-publishable code."
