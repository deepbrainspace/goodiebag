name: üìù Create Release PRs

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      # For manual execution
      package:
        description: 'Specific package to release'
        required: false
        type: choice
        options:
          - nx-rust
          - nx-surrealdb
          - claude-code-toolkit
          - goodiebag
      version:
        description: 'Version bump type'
        required: false
        type: choice
        default: 'auto'
        options:
          - 'auto'
          - patch
          - minor
          - major
      # For automatic execution via on-pr-merged.yml
      pr_number:
        description: 'PR number'
        required: false
        type: string
      head_ref:
        description: 'Head branch reference'
        required: false
        type: string
      head_sha:
        description: 'Head commit SHA'
        required: false
        type: string
      base_ref:
        description: 'Base branch reference'
        required: false
        type: string

jobs:
  detect:
    name: Detect
    runs-on: ubuntu-latest
    outputs:
      has-packages: ${{ steps.detect.outputs.has-packages }}
      packages: ${{ steps.detect.outputs.packages }}
      package-count: ${{ steps.detect.outputs.package-count }}
      package-groups: ${{ steps.detect.outputs.package-groups }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace

      - name: Detect affected packages
        id: detect
        uses: ./.github/actions/detect-affected
        with:
          package: ${{ github.event.inputs.package || '' }}

  changelog:
    name: Changelog ${{ matrix.package }}
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has-packages == 'true'

    strategy:
      matrix:
        package: ${{ fromJson(needs.detect.outputs.packages) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup workspace
        uses: ./.github/actions/setup-workspace
        with:
          package-group: ${{ fromJson(needs.detect.outputs.package-groups)[matrix.package] }}
          package-name: ${{ matrix.package }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Prepare release and create branch
        run: |
          echo "üìù Preparing release for ${{ matrix.package }}..."

          echo "üîç Git environment debugging:"
          echo "Current branch: $(git branch --show-current)"
          echo "Recent commits:"
          git log --oneline -5
          echo "Git status:"
          git status --porcelain
          echo ""

          # Use consistent branch naming (Release Please strategy)
          BRANCH_NAME="release/${{ matrix.package }}"
          echo "üåø Target branch: $BRANCH_NAME"

          # Check if release branch already exists
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "üìã Release branch exists, resetting to main with latest changes"
            git fetch origin "$BRANCH_NAME"
            git checkout -B "$BRANCH_NAME" main  # Reset to main, don't merge
          else
            echo "üìã Creating new release branch"
            git checkout -b "$BRANCH_NAME"
          fi

          VERSION_INPUT="${{ github.event.inputs.version }}"
          if [ -z "$VERSION_INPUT" ] || [ "$VERSION_INPUT" = "auto" ]; then
            echo "üìã Using automatic version determination from conventional commits"
            VERSION_CMD="nx release --projects=${{ matrix.package }} --skip-publish --verbose"
          else
            echo "üìã Using manual version bump: $VERSION_INPUT"
            VERSION_CMD="nx release $VERSION_INPUT --projects=${{ matrix.package }} --skip-publish --verbose"
          fi

          echo "üéØ Executing: $VERSION_CMD"
          NX_OUTPUT=$($VERSION_CMD 2>&1)
          echo "$NX_OUTPUT"

          # Extract version from NX output first to use in commit message
          VERSION=$(echo "$NX_OUTPUT" | grep "New version.*written" | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1 || echo "")

          if [ -z "$VERSION" ]; then
            echo "‚ÑπÔ∏è No version change for ${{ matrix.package }}, skipping release"
            exit 0
          fi

          echo "üì¶ Package: ${{ matrix.package }}"
          echo "üîñ Version: $VERSION"

          # Amend the commit message to be more descriptive
          echo "üìù Updating commit message"
          git commit --amend -m "chore(release): publish ${{ matrix.package }}@${VERSION}

          - Update version to ${VERSION}
          - Generate changelog entry
          - Prepare for release to registry"

          # Force push to release branch (safe since it's always the same branch)
          # Read changelog content for PR body
          echo "üìñ Reading changelog content"
          # Try both root-level and packages subdirectory
          if [ -f "CHANGELOG.md" ] && grep -q "${{ matrix.package }}" "CHANGELOG.md" 2>/dev/null; then
            CHANGELOG_PATH="CHANGELOG.md"
          elif [ -f "packages/${{ matrix.package }}/CHANGELOG.md" ]; then
            CHANGELOG_PATH="packages/${{ matrix.package }}/CHANGELOG.md"
          else
            # Use NX to find the project root
            PROJECT_ROOT=$(nx show project ${{ matrix.package }} --json 2>/dev/null | grep '"root":' | sed 's/.*"root": *"\([^"]*\)".*/\1/' || echo "")
            if [ -n "$PROJECT_ROOT" ] && [ -f "$PROJECT_ROOT/CHANGELOG.md" ]; then
              CHANGELOG_PATH="$PROJECT_ROOT/CHANGELOG.md"
            else
              CHANGELOG_PATH="packages/${{ matrix.package }}/CHANGELOG.md"  # fallback
            fi
          fi

          if [ -f "$CHANGELOG_PATH" ]; then
            # Extract only the latest changelog entry and strip user mentions to avoid notifications
            CHANGELOG_CONTENT=$(awk '/^## \[/{if(found) exit; found=1; next} found && /^## \[/{exit} found' "$CHANGELOG_PATH" | sed 's/@[a-zA-Z0-9_-]\+//g' || echo "")
            if [ -z "$CHANGELOG_CONTENT" ]; then
              CHANGELOG_CONTENT="No changelog entry found for this version."
            fi
          else
            CHANGELOG_CONTENT="Changelog file not found at $CHANGELOG_PATH"
          fi

          # Force push to release branch (safe since it's always the same branch)
          echo "üì§ Pushing release branch"
          git push origin "$BRANCH_NAME" --force

          # Create comprehensive PR body with changelog content
          PR_BODY="Release request for ${{ matrix.package }} v${VERSION}

          ## üìã Changes

          ${CHANGELOG_CONTENT}

          ## üì¶ Package Details
          - **Name**: \`${{ matrix.package }}\`
          - **Version**: \`${VERSION}\`
          - **Branch**: \`${BRANCH_NAME}\`

          ## üöÄ Release Process
          Merge this PR to trigger the release pipeline which will:
          - Create git tag \`${{ matrix.package }}@${VERSION}\`
          - Publish to appropriate registry (npm/crates.io)
          - Generate GitHub release with changelog"

          # Create or update PR (GitHub will update existing PR if it exists)
          echo "üìã Creating/updating release PR"
          gh pr create \
            --title "üöÄ Release Request for ${{ matrix.package }}@${VERSION}" \
            --body "$PR_BODY" \
            --base main \
            --head "$BRANCH_NAME" || \
          gh pr edit "$BRANCH_NAME" \
            --title "üöÄ Release Request for ${{ matrix.package }}@${VERSION}" \
            --body "$PR_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  no-packages:
    name: ‚ÑπÔ∏è No Release Needed
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.has-packages == 'false'

    steps:
      - name: No packages affected
        run: |
          echo "‚ÑπÔ∏è No packages with publish targets were affected by recent changes."
          echo "The changes appear to be documentation, configuration, or non-publishable code."

  # Summary status for GitHub checks
  prepare-status:
    name: ‚úÖ Prepare Status
    needs: [detect, changelog, no-packages]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Report prepare status
        run: |
          if [[ "${{ needs.detect.outputs.has-packages }}" == "true" ]]; then
            echo "‚úÖ Release PRs created successfully"
            echo "üì¶ Packages: ${{ needs.detect.outputs.packages }}"
            echo "üîó Check the PRs tab for release requests"
          else
            echo "‚ÑπÔ∏è No releases needed - no affected packages found"
          fi
