name: CD - Main Branch

on:
  push:
    branches:
      - main
      - develop
    # Only run when code changes
    paths:
      - 'packages/**'
      - 'apps/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'

# Prevent concurrent deployments
concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: false

jobs:
  detect-changes:
    name: Detect affected packages
    runs-on: ubuntu-latest
    outputs:
      affected-packages: ${{ steps.detect.outputs.packages }}
      has-affected: ${{ steps.detect.outputs.has-affected }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Detect affected packages
        id: detect
        run: |
          # Get affected projects that have a publish target
          AFFECTED=$(pnpm nx show projects --affected --with-target=publish --json || echo '[]')
          echo "Affected packages: $AFFECTED"
          
          # Check if we have any affected packages
          if [ "$AFFECTED" = "[]" ] || [ -z "$AFFECTED" ]; then
            echo "packages=[]" >> $GITHUB_OUTPUT
            echo "has-affected=false" >> $GITHUB_OUTPUT
          else
            echo "packages=$AFFECTED" >> $GITHUB_OUTPUT
            echo "has-affected=true" >> $GITHUB_OUTPUT
          fi

  publish:
    name: Publish packages
    needs: detect-changes
    if: needs.detect-changes.outputs.has-affected == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJSON(needs.detect-changes.outputs.affected-packages) }}
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set SHAs for NX
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Cache NX
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Build package
        run: pnpm nx build ${{ matrix.package }}

      - name: Get package info
        id: package-info
        run: |
          # Get package path and current version
          PACKAGE_PATH=$(pnpm nx show project ${{ matrix.package }} --json | jq -r '.sourceRoot' | sed 's|/src||')
          CURRENT_VERSION=$(jq -r '.version' $PACKAGE_PATH/package.json)
          PACKAGE_NAME=$(jq -r '.name' $PACKAGE_PATH/package.json)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Create SHA version (e.g., 1.0.0-sha.a59d989)
          SHA_VERSION="${CURRENT_VERSION}-sha.${SHORT_SHA}"
          
          echo "path=$PACKAGE_PATH" >> $GITHUB_OUTPUT
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$SHA_VERSION" >> $GITHUB_OUTPUT
          echo "short-sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Update package version
        run: |
          cd ${{ steps.package-info.outputs.path }}
          npm version ${{ steps.package-info.outputs.version }} --no-git-tag-version
          
      - name: Configure npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm whoami

      - name: Publish to npm
        run: |
          cd ${{ steps.package-info.outputs.path }}
          npm publish --tag next --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create package tarball
        id: create-tarball
        run: |
          cd ${{ steps.package-info.outputs.path }}
          npm pack
          TARBALL=$(ls *.tgz)
          echo "tarball=${{ steps.package-info.outputs.path }}/$TARBALL" >> $GITHUB_OUTPUT
          echo "filename=$TARBALL" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: actions/create-release@v1
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.package }}-${{ steps.package-info.outputs.version }}
          release_name: ${{ matrix.package }} ${{ steps.package-info.outputs.version }}
          body: |
            ## üöÄ Development Release
            
            **Package**: `${{ steps.package-info.outputs.name }}`
            **Version**: `${{ steps.package-info.outputs.version }}`
            **Commit**: ${{ github.sha }}
            
            ### Installation
            
            ```bash
            # npm
            npm install ${{ steps.package-info.outputs.name }}@next
            
            # pnpm
            pnpm add ${{ steps.package-info.outputs.name }}@next
            
            # From GitHub Release
            npm install ${{ steps.create-release.outputs.upload_url }}
            ```
            
            ‚ö†Ô∏è This is a development release from the main branch.
          draft: false
          prerelease: true

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball }}
          asset_name: ${{ steps.create-tarball.outputs.filename }}
          asset_content_type: application/gzip

  notify-no-changes:
    name: No packages to publish
    needs: detect-changes
    if: needs.detect-changes.outputs.has-affected == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Report status
        run: |
          echo "‚úÖ No affected packages with publish target found."
          echo "No packages need to be published for this commit."